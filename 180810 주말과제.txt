2.1  
boolean - 1b
char - 2b
byte - 1b
short - 2b
int - 4b
long - 8b
float - 4b
double - 8b

2-2
long regNo = 8888881111111L;

2-3
리터럴 : 100, 100L, 3.14f
변수 : i, I
키워드 : int, long, float, final
상수 : PI

2-4
b

2-5
12
true
131
??+2 // 51
??+?? // 99
Java
?? // 오류

2-6
True
NULL
Class
System

2-7
a, d, e, g

2-8
a, d // 참조형 변수는 4byte

2-9
d  // e. char -> int 는 생략 가능

2-10
?? // 0~65535

2-11
a, c, d // b. char는 반드시 한 개의 문자를 지정해야함

2-12
a, b, c, e

2-13
c, e, f // 모든 참조형 타입의 기본값은 NULL


3-1
?
true
13
4 // 5. 앞에서 +1해서
true // 소문자가 대문자보다 숫자가 큼
2
?? // 5. 53-48
B  // 66. int형으로 변환후 계산(이항연산자의 성질)
B  // ++는 단항연산자로 int로 형변환하지않음(스택사용)
A // B. 후위형은 출력한 다음 저장값 증가 B를 출력하고 문자 C로 저장
A // C. 최종 c에 저장된 값

3-2
(numOfApples / sizeOfBucket) + 1
// numApp / sizeBuck + (numApp%sizeBuck > 0 ? 1 : 0) ;


3-3
(num >= 0 ? "양수" : "음수");
// (num > 0 ? "양수" : (num < 0 "음수" : "0");

3-4
(num / 100) * 100;

3-5
(num/10)*10+1;

3-6
(num/10+1)*10-num;
// 10 - num%10

3-7
??
// (int) ((5/9f * (fahrenheit - 32))*100 + 0.5) / 100f; 
// 반올림 수식 (int) ( * 자릿수 + 0.5) / 100f 

3-8
byte c = (byte) (a + b);
ch = (char) (ch + 2);
float f = (float) 3/2;  == 3 / 2f;
long l = (long) 3000*3000*3000; == 3000L;
boolean result = (d != f2);  // (float)d == f2;
// 자료형 항상 체크

3-9
??
// ('a' <= ch && ch <='z') || ('A' <= ch && ch <='Z') || ('0' <= ch && ch <= '9')

3-10
char lowerCase = (ch > 64 && ch < 97) ? (char)(ch+32) : ch;
== ('A' <= ch && ch <= 'Z') ? (char)(ch+32) : ch;


4-1
1. 10 < x && x < 20;
2. ch != ' ' && ch != '\t';
3. ch == 'x' || ch == 'X';
4. '0' <= ch && ch <= '9';
5. 'A' <= ch && ch <= 'z';
6. (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
7. powerOn == false;
8. str.equals("yes");

4-2
for(int i =1; i<=20; i++) {
	if(i % 2 != 0 || i % 3 != 0) {
		sum = sum + i;
	}
}
System.out.println(sum); 

4-3
for (int i = 1; i <= 10; i++) {
	j = j + i;			
	sum = sum + j;
}
System.out.println(sum);

4-4
for (int i = 1; i < 500; i++) {
	if (i % 2 == 0) {
		j = -i;
	} else {
		j = i;
	}
	sum = sum + j;
	if (sum >= 100) {
		break;
	}
}
System.out.println("i = " + i + ", sum = " + sum);

4-5
int i = 0;
int j = 0;
while (i <= 10) {
	j = 0;
	while (j <= i) {
		System.out.print("*");
		j++;
	}
	System.out.println();
	i++;
}

4-6
int count = 0;
for(int i=1;i<=6;i++) {
	for(int j=1;j<=6;j++) {
		sum = i + j;
		if (sum == 6) {
			count++;
		}
	}
}
System.out.println(count);

4-7
int value = (int) (Math.random() * 6) + 1;

4-8
for (int x = 0; x <= 10; x++) {
	for (int y = 0; y <= 10; y++) {
		if(x*2 + y * 4 == 10) {
			System.out.println("x="+x+", y="+y);
		}
	}
}

4-9
??
// charAt(i) 메소드는 문자열에서 i번째 문자를 반환한다(i값은 0부터 시작)
// sum = sum + str.charAt(i) = '0';

4-10
??
//
for (int i = 1; i <= 5; i++) {
	sum = sum + num % 10;
	num = num / 10;
}

4-11
num3 = num1 + num2;
num1 = num2;
num2 = num3;
System.out.print(", "+num2);

4-12
??
// 표를 이용해서 계산식을 만들자
public class Ex4_12 {
	public static void main(String[] args) {
		for (int i = 1; i <= 9; i++) {
			for (int j = 1; j <= 3; j++) {
				int x = j + 1 + (i - 1) / 3 * 3;
				int y = i % 3 == 0 ? 3 : i % 3;
				if (x>9) break;
				System.out.print(x+"*"+y+"="+x*y+"\t");
			}
			System.out.println();
			if(i%3==0)
				System.out.println();
		}
	}

}

4-13
??
// 숫자가 아닐때 반복문을 빠져나와야 한다
ch = value.charAt(i);
if ('0'>ch && ch>'9') {
	isNumber = false;
	break;
}

4-14
int answer = (int) (Math.random() * 100) + 1;

if(input > answer) {
	System.out.println("더 작은 수를 입력하세요");
} else if(input < answer) {
	System.out.println("더 큰 수를 입력하세요");
} else {
	System.out.println("맞췄습니다.");
	System.out.println("시도횟수는 "+count+"번입니다.");
	break;
}

4-15
??
// 4-10에 10씩 곱하면서 더하면 된다
result = result * 10 + tmp % 10;
tmp = tmp / 10;



챕터4까지

