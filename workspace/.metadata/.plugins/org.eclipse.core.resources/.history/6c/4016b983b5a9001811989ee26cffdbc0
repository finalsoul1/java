import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

class LambdaEx4 {
	public static void main(String[] args) {
		ArrayList<Integer> list = new ArrayList<>();
		
		for (int i = 0; i < 10; i++)
			list.add(i);

		// fore + 컨트롤 + 스페이스
		for (Integer i : list) {
			System.out.print(i + ", ");
		}
		System.out.println("\n--------------------------");
		
		// super Integer = Integer나 부모클래스 ex)Number
		// 추상메소드에 바디를 붙여서 콘크리트 메소드로 new를 가능하게함
		// 익명클래스
		Consumer<Integer> action = new Consumer<Integer>() {
			@Override
			public void accept(Integer i) {
				System.out.print(i + ",");
			}
		};
		
		// list의 모든 요소를 출력
		// 파라미터 -> 바디연산자생략, 리턴생략
		list.forEach(action);
		System.out.println();
		list.forEach(i -> System.out.print(i + ",")); // for문을 감추고 핵심을 부각
		
		System.out.println("\n--------------------------");


		// list에서 2 또는 3의 배수를 제거한다.
		// remove if 조건식(조건식에 객체도 가능, 객체의 리턴값이 true/false면 됨)
		list.removeIf(x -> x % 2 == 0 || x % 3 == 0); // if문을 감추고 조건식을 부각
		System.out.println(list);

		// 객체지향 프로그래밍 vs 함수형 프로그래밍
		// 함수형 프로그래밍은 함수를 순수한 상태로 분리한 다음
		// 조립해서 사용하는 기술로 로직의 재 사용성을 극대화 할 수 있는 기술이다
		// 객체지향 프로그래밍에서 자주 사용하는 유틸 클래스와 비슷하며
		// 함수 재 사용성을 극대화 하기 위해서 객체 당 하나의 메소드만 배치하는
		// 형태를 취한다
		
		list.replaceAll(i -> i * 10); // list의 각 요소에 10을 곱한다.
		System.out.println(list);

		Map<String, String> map = new HashMap<>();
		map.put("1", "1");
		map.put("2", "2");
		map.put("3", "3");
		map.put("4", "4");

		// map의 모든 요소를 {k,v}의 형식으로 출력한다.
		map.forEach((k, v) -> System.out.print("{" + k + "," + v + "},"));
		System.out.println();
	}
}
